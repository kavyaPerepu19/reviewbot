---------------
Day-1 Exercise:
----------------
Method: get
Route: /student/:rollNo

Response:
if successful:
status(200).json(student);

if exception found:
status(404).json({ message: "Student not found" });

if exception found:
status(500).json({ message: "Error fetching student data", error: err });


-----------------
Day-2 Exercise-1:
-----------------
Insert a new student document:
Sends a `POST` request to insert the document.

Method: post
Route: /student

Response:
if successful:
status(201).json({ message: "Student added successfully", student });

if exception found:
status(400).json({ message: "Failed to add student", error: err });});


Delete the student document:
Sends a `DELETE` request to delete the inserted document using its `rollNo`.

Method: delete
Route: /student/:rollNo
Response:
if successful:
status(200).json({ message: "Student deleted successfully", deletedStudent });

if no data found:
status(404).json({ message: "Student not found" });

if exception found:
status(400).json({ message: "Failed to delete student", error: err });


------------------
Day-2 EXERCISE: 2
------------------
complete the additional route.
Update a student document:
Sends a `PUT` request to update scores of a document using its `rollNo`.

Method: put
Route: /student/:rollNo

Response:
if successful:
status(200).json({ message: "Student updated successfully", updatedStudent });

if no data found:
status(404).json({ message: "Student not found" });

if exception found:
status(400).json({ message: "Failed to update student", error: err });



------------------
Day-2 EXERCISE: 3
------------------
Fetch the students name, rollNo, GPA:
Sends a `GET` request to fetch the name, rollNo, and GPA based on their scores 
(GPA should be two decimal point value).

Method: get
Route: /students

Response:

if successful:
status(200).json(studentsWithGPA);

Create the studentsWithGPA object in the following format:
	- Each document should have the following fields:
		{
			name: student.name, 
			rollNo: student.rollNo,
			gpa
		}
			
	- Formula to calculate GPA is:
		const gpa = ((Java + CPP + Python + GenAI + FSD) / 5).toFixed(2);


if exception found:
status(400).json({ message: "Failed to fetch students", error: err });